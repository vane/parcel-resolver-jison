{"mappings":";;;;;;;;;;;;;;;;;AAAA;;;IAIA,2CAAe,IAAI,CAAA,GAAA,4BAAO,EAAE;IAC1B,MAAM,SAAQ,aAAC,UAAS,WAAE,QAAO,cAAE,WAAU,EAAC,EAAE;QAC9C,MAAM,SAAS,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC;QAC5C,IAAI,CAAC,UAAU,YAAY;YACzB,MAAM,IAAI,WAAW,WAAW,CAAC,KAAK,CAAC;YACvC,MAAM,WAAW,EAAE,KAAK,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,IAAI,CAAC;YAC/C,MAAM,WAAW,YAAY;YAC7B,MAAM,QAAQ,CAAA,GAAA,qCAAI,AAAD,EAAE,IAAI,CAAC,UAAU;YAClC,MAAM,cAAc,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC;YACjD,IAAI,aAAa;gBACf,MAAM,SAAS,MAAM,QAAQ,OAAO,CAAC,QAAQ,CAAC;gBAC9C,MAAM,eAAe,OAAO,QAAQ;gBACpC,MAAM,SAAS,IAAI,CAAA,GAAA,sCAAK,AAAD,EAAE,KAAK,CAAC,MAAM,CAAC;gBACtC,OAAO;oBACL,UAAU;oBACV,MAAM,OAAO,QAAQ;gBACvB;YACF,CAAC;QACH,CAAC;QACD,OAAO,IAAI;IACb;AACF","sources":["src/JisonResolver.js"],"sourcesContent":["import {Resolver} from '@parcel/plugin';\nimport path from 'path';\nimport jison from 'jison';\n\nexport default new Resolver({\n  async resolve({specifier, options, dependency}) {\n    const exists = await options.inputFS.exists(specifier)\n    if (!exists && dependency) {\n      const a = dependency.resolveFrom.split('/');\n      const basepath = a.slice(0, a.length - 1).join('/');\n      const specpath = specifier + '.jison'\n      const fpath = path.join(basepath, specpath);\n      const existsJison = await options.inputFS.exists(fpath);\n      if (existsJison) {\n        const source = await options.inputFS.readFile(fpath);\n        const sourceString = source.toString();\n        const parser = new jison.Jison.Parser(sourceString);\n        return {\n          filePath: fpath,\n          code: parser.generate()\n        }\n      }\n    }\n    return null;\n  }\n});"],"names":[],"version":3,"file":"JisonResolver.js.map","sourceRoot":"../"}