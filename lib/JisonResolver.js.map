{"mappings":";;;;;;;;;;;;;;;;AAAA;;IAGA,2CAAe,IAAI,CAAA,GAAA,4BAAO,EAAE;IAC1B,MAAM,SAAQ,aAAC,UAAS,WAAE,QAAO,cAAE,WAAU,EAAC,EAAE;QAC9C,MAAM,SAAS,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC;QAE5C,IAAI,CAAC,UAAU,YAAY;YACzB,kBAAkB;YAClB,MAAM,IAAI,WAAW,WAAW,CAAC,KAAK,CAAC;YACvC,MAAM,WAAW,EAAE,KAAK,CAAC,GAAG,EAAE,MAAM,GAAG,GAAG,IAAI,CAAC;YAE/C,4CAA4C;YAC5C,MAAM,WAAW,CAAA,GAAA,qCAAG,EAAE,IAAI,CAAC,UAAU,YAAY;YAEjD,MAAM,cAAc,MAAM,QAAQ,OAAO,CAAC,MAAM,CAAC;YACjD,IAAI,aACF,OAAO;0BACL;YACF;QAEJ,CAAC;QACD,OAAO,IAAI;IACb;AACF","sources":["src/JisonResolver.js"],"sourcesContent":["import {Resolver} from '@parcel/plugin';\nimport path from 'path';\n\nexport default new Resolver({\n  async resolve({specifier, options, dependency}) {\n    const exists = await options.inputFS.exists(specifier)\n\n    if (!exists && dependency) {\n      // split file name\n      const a = dependency.resolveFrom.split('/');\n      const basepath = a.slice(0, a.length - 1).join('/');\n\n      // resolve path to file with jison extension\n      const filePath = path.join(basepath, specifier + '.jison');\n\n      const existsJison = await options.inputFS.exists(filePath);\n      if (existsJison) {\n        return {\n          filePath,\n        }\n      }\n    }\n    return null;\n  }\n});"],"names":[],"version":3,"file":"JisonResolver.js.map","sourceRoot":"../"}